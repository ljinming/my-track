{"code":"import { baseUUid, emit } from \"./base\";\r\nimport { normalizePerformanceRecord } from \"./utils\";\r\nlet lastResource = {};\r\nclass RequestTemplate {\r\n    constructor(config = {}) {\r\n        const list = ['src', 'method', 'duration', 'responseStatus'];\r\n        list.forEach((key) => { this[key] = config[key] || null; });\r\n    }\r\n}\r\n/**\r\n * 主动触发性能事件上报\r\n * @param {*} eventId 事件ID\r\n * @param {*} options 自定义配置信息\r\n */\r\nfunction tracePerformance(tyep, options) {\r\n    let showOpts = {};\r\n    if (tyep === 'server') {\r\n        showOpts = options;\r\n    }\r\n    else {\r\n        const time = Date.now();\r\n        Object.keys(options).forEach(key => {\r\n            showOpts[key] = {\r\n                triggerTime: time,\r\n                url: window.location.href,\r\n                apiTimes: options[key].startTime,\r\n                durationTimes: options[key].duration,\r\n                responseEndTime: options[key].responseEnd, //api 返回结果的时间\r\n            };\r\n        });\r\n    }\r\n    emit({\r\n        type: 'performance',\r\n        subType: 'resourceApi',\r\n        uuid: baseUUid,\r\n        triggerTime: Date.now(),\r\n        data: normalizePerformanceRecord(showOpts),\r\n    });\r\n}\r\n/**\r\n * ajax, axios请求拦截\r\n */\r\nfunction interceptAjax() {\r\n    const { open, send } = XMLHttpRequest.prototype;\r\n    const _config = new RequestTemplate();\r\n    // 劫持 open方法\r\n    //   XMLHttpRequest.prototype.open = function openXHR(method, url, async) {\r\n    //     _config.requestMethod = method;\r\n    //     _config.src = url;\r\n    //     return open.call(this, method, url, async);\r\n    //   };\r\n    // 劫持 send方法\r\n    XMLHttpRequest.prototype.send = function (body) {\r\n        console.log('=========3', body);\r\n        // body 就是post方法携带的参数\r\n        // readyState发生改变时触发,也就是请求状态改变时\r\n        // readyState 会依次变为 2,3,4 也就是会触发三次这里\r\n        this.addEventListener('readystatechange', () => {\r\n            const { readyState, status, responseURL = _config.src, responseText, } = this;\r\n            if (readyState === 4) { // 请求已完成,且响应已就绪\r\n                if (status === 200 || status === 304) {\r\n                    tracePerformance('server', {\r\n                        url: responseURL,\r\n                        responseStatus: status,\r\n                        duration: Date.now() - _config.triggerTime,\r\n                        params: body ? body : undefined,\r\n                    });\r\n                }\r\n                else {\r\n                    tracePerformance('server', {\r\n                        url: responseURL,\r\n                        responseStatus: status,\r\n                        duration: Date.now() - _config.triggerTime,\r\n                        params: body ? body : undefined,\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        _config.triggerTime = Date.now();\r\n        return send.call(this, body);\r\n    };\r\n}\r\nfunction init(_options) {\r\n    // EventEmitter.on('resource', (values) => {\r\n    //  //   console.log('=resource------------values', values)\r\n    //     lastResource = values\r\n    //     debugger\r\n    //     tracePerformance(values)\r\n    // },true)\r\n    const { performanceServer, errorServer } = _options;\r\n    if (!performanceServer && !errorServer)\r\n        return;\r\n    //'longtask','frame','navigation','resource','mark','measure',\r\n    // createObserver({ entryTypes: ['resource'] }, ).then(res => {\r\n    //     console.log('===3',res)\r\n    // })\r\n    interceptAjax();\r\n}\r\nexport default {\r\n    init,\r\n};\r\n","references":["/Users/jinmingliu/code/my-track/type.ts","/Users/jinmingliu/code/my-track/lib/base.ts","/Users/jinmingliu/code/my-track/lib/EventEmitter.ts","/Users/jinmingliu/code/my-track/lib/utils/index.ts"]}
