{"code":"import { __assign } from \"tslib\";\r\n// 兼容判断\r\nexport var supported = {\r\n    performance: !!window.performance,\r\n    getEntriesByType: !!(window.performance && performance.getEntriesByType),\r\n    PerformanceObserver: 'PerformanceObserver' in window,\r\n    MutationObserver: 'MutationObserver' in window,\r\n    PerformanceNavigationTiming: 'PerformanceNavigationTiming' in window,\r\n    // PerformanceTiming:'PerformanceTiming' in window,\r\n};\r\nimport { getUUid, map, nextTime, sendBeacon } from \"./utils\";\r\nimport { DEBUG_LOG, MAX_CACHE_LEN, MAX_WAITING_TIME } from './utils/constans';\r\n// 当前应用ID,在整个页面生命周期内不变,单页应用路由变化也不会改变,加载SDK时创建,且只创建一次\r\nvar baseUUid = getUUid();\r\nvar reqUrl = '';\r\nvar events = []; // 批次队列\r\nvar timer = null; // 定时发送定时器\r\nvar base = {\r\n    pageId: baseUUid,\r\n    appName: ''\r\n};\r\nvar init = function (_options) {\r\n    var appName = _options.appName, requestUrl = _options.requestUrl;\r\n    reqUrl = requestUrl;\r\n    base.appName = appName;\r\n};\r\n/**\r\n * 记录需要发送的埋点数据\r\n * @param {*} e 需要发送的事件信息\r\n * @param {boolean} flush 是否立即发送\r\n */\r\nfunction emit(e, flush) {\r\n    if (flush === void 0) { flush = false; }\r\n    events = events.concat(e); // 追加到事件队列里\r\n    clearTimeout(timer);\r\n    // 满足最大记录数,立即发送,否则定时发送(flush为true代表立即发送)\r\n    events.length >= MAX_CACHE_LEN || flush\r\n        ? send()\r\n        : timer = setTimeout(function () { send(); }, MAX_WAITING_TIME);\r\n}\r\n/**\r\n * 发送埋点信息\r\n */\r\nfunction send() {\r\n    if (events.length) {\r\n        // 选取首部的部分数据来发送,performance会一次性采集大量数据追加到events中\r\n        var sendEvents = events.slice(0, MAX_CACHE_LEN); // 需要发送的事件\r\n        events = events.slice(MAX_CACHE_LEN); // 剩下待发的事件\r\n        debug('send events', sendEvents);\r\n        var time_1 = Date.now();\r\n        console.log('===2', reqUrl);\r\n        sendBeacon(reqUrl, {\r\n            baseInfo: __assign(__assign({}, base), { sendTime: time_1 }),\r\n            eventInfo: map(sendEvents, function (e) {\r\n                e.sendTime = time_1; // 设置发送时间\r\n                // 补充type字段,将click、scroll、change、submit事件作为一类存储\r\n                if (e.eventType === 'click' || e.eventType === 'scroll' || e.eventType === 'submit' || e.eventType === 'change') {\r\n                    e.type = 'mix';\r\n                    return e;\r\n                }\r\n                if (e.eventType === 'performance') {\r\n                    // 将性能进行分类,不同类型的性能数据差异较大,分开存放,资源、页面、请求\r\n                    switch (e.eventId) {\r\n                        case 'resource':\r\n                            e.type = 'resourcePerformance';\r\n                            break;\r\n                        case 'page':\r\n                            e.type = 'pagePerformance';\r\n                            break;\r\n                        case 'server':\r\n                            e.type = 'serverPerformance';\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    return e;\r\n                }\r\n                e.type = e.eventType; // 其他类型type同eventType\r\n                return e;\r\n            }),\r\n        });\r\n        if (events.length)\r\n            nextTime(send); // 继续传输剩余内容,在下一个时间择机传输\r\n    }\r\n}\r\n/**\r\n * 控制台输出信息\r\n * @param  {...any} args 输出信息\r\n */\r\nfunction debug() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    if (DEBUG_LOG)\r\n        console.log.apply(console, args);\r\n}\r\nexport { emit, baseUUid, init };\r\nexport default {\r\n    init: init\r\n};\r\n","references":["/Users/jinmingliu/code/my-track/type.ts","/Users/jinmingliu/code/my-track/lib/utils/index.ts","/Users/jinmingliu/code/my-track/lib/utils/constans.ts"]}
