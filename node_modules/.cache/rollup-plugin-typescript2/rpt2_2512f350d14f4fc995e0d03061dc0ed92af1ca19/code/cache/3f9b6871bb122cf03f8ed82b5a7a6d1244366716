{"code":"import { __assign } from \"tslib\";\r\nimport { baseUUid, emit, supported } from \"./base\";\r\nimport { createObserver, normalizePerformanceRecord } from \"./utils\";\r\n/**\r\n * 发送首次页面性能数据\r\n */\r\nfunction observeNavigationTiming() {\r\n    var times = {\r\n        fmp: 0,\r\n    };\r\n    var performance = window.performance;\r\n    var timing = performance.timing;\r\n    if (supported.getEntriesByType) {\r\n        var paintEntries = performance.getEntriesByType('paint');\r\n        if (paintEntries.length)\r\n            times.fmp = paintEntries[paintEntries.length - 1].startTime;\r\n        //优先使用 navigation v2 \r\n        if (supported.PerformanceNavigationTiming) {\r\n            var nt2Timing = performance.getEntriesByType('navigation')[0];\r\n            if (nt2Timing)\r\n                timing = nt2Timing;\r\n        }\r\n    }\r\n    // 白屏时间 (从请求开始到浏览器开始解析第一批HTML文档字节的时间差)\r\n    times.fpt = timing.responseEnd - timing.fetchStart;\r\n    // 从开始发起这个页面的访问开始算起,减去重定向跳转的时间,在performanceV2版本下才进行计算,v1版本的fetchStart是时间戳而不是相对于访问起始点的相对时间\r\n    //if (times.fmp && supported.PerformanceNavigationTiming) times.fmp -= timing.fetchStart;\r\n    times.tti = timing.domInteractive - timing.fetchStart; // 首次可交互时间\r\n    times.ready = timing.domContentLoadedEventEnd - timing.fetchStart; // HTML加载完成时间\r\n    times.loadon = timing.loadEventStart - timing.fetchStart; // 页面完全加载时间\r\n    times.firstbyte = timing.responseStart - timing.domainLookupStart; // 首包时间\r\n    times.dns = timing.domainLookupEnd - timing.domainLookupStart; // dns查询耗时\r\n    times.appcache = timing.domainLookupStart - timing.fetchStart; // dns缓存时间\r\n    times.tcp = timing.connectEnd - timing.connectStart; // tcp连接耗时\r\n    times.ttfb = timing.responseStart - timing.requestStart; // 请求响应耗时\r\n    times.trans = timing.responseEnd - timing.responseStart; // 内容传输耗时\r\n    times.dom = timing.domInteractive - timing.responseEnd; // dom解析耗时\r\n    times.res = timing.loadEventStart - timing.domContentLoadedEventEnd; // 同步资源加载耗时\r\n    times.ssllink = timing.connectEnd - timing.secureConnectionStart; // SSL安全连接耗时\r\n    times.redirect = timing.redirectEnd - timing.redirectStart; // 重定向时间\r\n    times.unloadTime = timing.unloadEventEnd - timing.unloadEventStart; // 上一个页面的卸载耗时\r\n    sendFristData('calc', times);\r\n}\r\n// 首屏性能数据发送\r\nfunction sendFristData(type, timesData) {\r\n    var times = type === 'observer' ? timesData : {\r\n        firstPaint: timesData['first-paint'].startTime,\r\n        firstContentfulPaint: timesData['first-contentful-paint'].startTime,\r\n        sslLinkTimes: timesData['navigation'].connectEnd - timesData['navigation'].secureConnectionStart,\r\n        redirectTimes: timesData['navigation'].redirectEnd - timesData['navigation'].redirectStart,\r\n        unLoadTime: timesData['navigation'].unloadEventEnd - timesData['navigation'].unloadEventStart // 上一个页面的卸载耗时\r\n    };\r\n    emit({\r\n        type: 'performance',\r\n        subType: 'document',\r\n        data: normalizePerformanceRecord(__assign({}, times)),\r\n        uuid: baseUUid,\r\n    });\r\n}\r\nfunction init(_options) {\r\n    var performanceFirstResource = _options.performanceFirstResource, performanceCore = _options.performanceCore;\r\n    if (!performanceFirstResource && !performanceCore)\r\n        return;\r\n    //'longtask','frame','navigation','resource','mark','measure',\r\n    if (supported.PerformanceObserver) {\r\n        createObserver({ entryTypes: ['paint', 'navigation'] }).then(function (res) {\r\n            // 页面加载完毕事件，发送首屏渲染数据\r\n            sendFristData('observer', res);\r\n        });\r\n    }\r\n    else {\r\n        observeNavigationTiming();\r\n    }\r\n}\r\nexport default { init: init };\r\n","references":["/Users/jinmingliu/code/my-track/type.ts","/Users/jinmingliu/code/my-track/lib/base.ts","/Users/jinmingliu/code/my-track/lib/utils/index.ts","/Users/jinmingliu/code/my-track/lib/EventEmitter.ts"]}
