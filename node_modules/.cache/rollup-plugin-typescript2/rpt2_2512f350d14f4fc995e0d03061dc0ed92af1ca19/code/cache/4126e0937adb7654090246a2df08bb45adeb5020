{"code":"import { __spreadArray } from \"tslib\";\r\nvar EventEmitter = /** @class */ (function () {\r\n    function EventEmitter() {\r\n        this.events = {};\r\n    }\r\n    EventEmitter.prototype.on = function (type, listener, isOneShot, isUnshift) {\r\n        // 因为其他的类可能继承自EventEmitter，子类的events可能为空，保证子类必须存在此实例属性\r\n        if (!this.events) {\r\n            this.events = {};\r\n        }\r\n        if (this.events[type]) {\r\n            if (isOneShot) {\r\n                this.events[type] = [listener];\r\n            }\r\n            else {\r\n                if (isUnshift) {\r\n                    this.events[type].unshift(listener);\r\n                }\r\n                else {\r\n                    this.events[type].push(listener);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.events[type] = [listener];\r\n        }\r\n    };\r\n    EventEmitter.prototype.emit = function (type) {\r\n        var _this = this;\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (this.events[type]) {\r\n            this.events[type].forEach(function (fn) { return fn.call.apply(fn, __spreadArray([_this], args, false)); });\r\n        }\r\n    };\r\n    // 只绑定一次，然后解绑\r\n    EventEmitter.prototype.once = function (type, listener) {\r\n        var self = this;\r\n        function oneTime() {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            listener.call.apply(listener, __spreadArray([this], args, false));\r\n            self.off(type, oneTime);\r\n        }\r\n        self.on(type, oneTime);\r\n    };\r\n    EventEmitter.prototype.off = function (type, listener) {\r\n        if (this.events[type]) {\r\n            var index = this.events[type].indexOf(listener);\r\n            this.events[type].splice(index, 1);\r\n        }\r\n    };\r\n    return EventEmitter;\r\n}());\r\nexport default new EventEmitter();\r\n","references":[]}
